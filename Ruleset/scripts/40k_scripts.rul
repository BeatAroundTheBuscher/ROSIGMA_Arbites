extended:
  tags:
    RuleItem:
      ITEM_PRIMED_AT_BATTLE_START: int
      ITEM_PRIMED_AT_BATTLE_START_VARIANCE: int
      ITEM_SETS_MISSION_TIMER: int
      ITEM_PRIMED_BY_MISSION_TIMER: int
      ITEM_FUSE_DELAYED_UNTIL_MISSION_TIMER: int

      ITEM_RECOIL: int
      ITEM_HAS_BIPOD: int
      ITEM_STRENGTH_REQUIREMENT: int

  scripts:
    createItem:
      - new: 40kAC_cI_prime_fuse_at_beginning
        offset: 1
        code: |
          var ptr RuleItem itemRuleset;
          var int fuseTimer;
          var int fuseTimerVariance;

          item.getRuleItem itemRuleset;
          itemRuleset.getTag fuseTimer Tag.ITEM_PRIMED_AT_BATTLE_START;
          itemRuleset.getTag fuseTimerVariance Tag.ITEM_PRIMED_AT_BATTLE_START_VARIANCE;

          if neq 0 fuseTimer;

            limit_lower fuseTimer 0;
            battle_game.randomRange fuseTimerVariance 0 fuseTimerVariance;
            add fuseTimer fuseTimerVariance;

            item.setFuseTimer fuseTimer;

          end;

          return;

      - new: 40kAC_cI_save_timed_objectives
        offset: 2
        code: |
          var ptr RuleItem itemRuleset;
          var int itemSetsMissionTimer;
          var int fuseTimer;

          item.getRuleItem itemRuleset;
          itemRuleset.getTag itemSetsMissionTimer Tag.ITEM_SETS_MISSION_TIMER;

          if neq 0 itemSetsMissionTimer;

            item.getFuseTimer fuseTimer;
            battle_game.setTag Tag.MISSION_TIMER fuseTimer;

          end;

          return;

      - new: 40kAC_cI_prime_fuse_for_mission_timer
        offset: 3
        code: |
          var ptr RuleItem itemRuleset;
          var int itemPrimedByMissionTimer;
          var int missionTimer;
          var int fuseTimerVariance;

          item.getRuleItem itemRuleset;
          itemRuleset.getTag itemPrimedByMissionTimer Tag.ITEM_PRIMED_BY_MISSION_TIMER;
          itemRuleset.getTag fuseTimerVariance Tag.ITEM_PRIMED_AT_BATTLE_START_VARIANCE;
          battle_game.getTag missionTimer Tag.MISSION_TIMER;

          if and neq 0 itemPrimedByMissionTimer neq 0 missionTimer;

            if gt itemPrimedByMissionTimer 0;

              sub itemPrimedByMissionTimer 1;

            end;

            battle_game.randomRange fuseTimerVariance 0 fuseTimerVariance;
            add missionTimer itemPrimedByMissionTimer;
            add missionTimer fuseTimerVariance;

            item.setFuseTimer missionTimer;

          end;

          return;

    newTurnItem:
      - new: 40kAC_nTI_prevent_fuses_cooking_off_till_mission_timer
        offset: 3
        code: |
          var ptr RuleItem itemRuleset;
          var int itemFuseDelayedUntilMissionTimer;
          var int fuseTimer;
          var int missionTimer;
          var int turnTimer;

          # Don't run during neutral side's turn
          if eq 2 side;
            return;
          end;

          item.getRuleItem itemRuleset;
          itemRuleset.getTag itemFuseDelayedUntilMissionTimer Tag.ITEM_FUSE_DELAYED_UNTIL_MISSION_TIMER;
          item.getFuseTimer fuseTimer;
          battle_game.getTag missionTimer Tag.MISSION_TIMER;

          if and neq 0 itemFuseDelayedUntilMissionTimer  neq -1 fuseTimer neq 0 missionTimer;

            if gt itemFuseDelayedUntilMissionTimer 0;

              sub itemFuseDelayedUntilMissionTimer 1;

            end;

            add missionTimer itemFuseDelayedUntilMissionTimer;

            # missionTimer is given in terms of grenade timers, need to convert turn and side to half turns
            set turnTimer turn;
            mul turnTimer 2;
            add turnTimer side;

            if and lt turnTimer missionTimer;

              add fuseTimer 1;
              item.setFuseTimer fuseTimer;

            end;

          end;

          return;

    accuracyMultiplierBonusStats:
      #*** recoil accuracy penalty on firing weapons with not enough strength ***
      - new: 40kAC_aMBS_missing_strength_affects_accuracy
        offset: 10
        code: |
          var ptr RuleItem weaponRuleset;
          var ptr BattleItem otherWeapon;
          var int itemRecoil;
          var int weaponHasBipod;
          var int unitIsKneeling;
          var int unitStrength;
          var int accuracyFloor;

          weapon.getRuleItem weaponRuleset;
          weaponRuleset.getTag itemRecoil Tag.ITEM_RECOIL;

          # bipod+kneeling = no recoil
          weaponRuleset.getTag weaponHasBipod Tag.ITEM_HAS_BIPOD;
          unit.isKneeled unitIsKneeling;

          if eq 0 itemRecoil;
            return bonus;
          else and neq 0 weaponHasBipod neq 0 unitIsKneeling;
            return bonus;
          end;

          # lower limit for penalty from recoil is 50% for snap/aimed, 0 for auto
          set accuracyFloor bonus;
          div accuracyFloor 2;

          if eq battle_action BA_AUTOSHOT;

            set accuracyFloor 0;

          end;

          # compare unit strength as percent of the recoil value
          # less than 50% = full penalty
          # 50% to 100% = scaling penalty
          unit.Stats.getStrength unitStrength;
          muldiv unitStrength 100 itemRecoil;

          if lt unitStrength 100;

            # autoshot gets twice the penalty (needs to reach 0 by half strength, not 50%)
            if eq battle_action BA_AUTOSHOT;

              sub unitStrength 50;
              mul unitStrength 2;

            end;

            muldiv bonus unitStrength 100;
            limit_lower bonus accuracyFloor;

          end;

          return bonus;


    recolorUnitSprite:
      #*** Handles periodic recolors due to buffs/debuffs on units ***
      - new: 40kAC_rUS_buffs_debuffs_recolor
        offset: 10
        code: |
          var int frame;
          var int frameLength;
          var int recolorPeriod;
          var int desync;
          var int color;
          var int newShade;
          var int temp;

          # Check to make sure this unit isn't set to be recolored by a hit first
          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;

          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              return new_pixel;

            end;

          end;

          set recolorPeriod 32;
          set frameLength 4;

          unit.getTag desync Tag.UNIT_RECOLOR_DESYNC;
          set frame anim_frame;
          add frame desync;
          mod frame recolorPeriod;

          # First, a blue flash if the unit has an energy shield
          unit.getTag temp Tag.UNIT_ENERGY_SHIELD_HP;
          set color COLOR_X1_BLUE1;
          if and neq temp 0 lt frame frameLength;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

            return new_pixel;

          end;

          sub frame frameLength;
          sub frame 1;

          # Next, a red flash if the unit is a traitor
          unit.getTag temp Tag.UNIT_TURNED_TRAITOR;

          if and neq temp 0 lt frame frameLength;

            set color COLOR_X1_RED;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

          end;

          return new_pixel;

items:
  - type: STR_CULTIST_SUMMONING_LEVEL_1_TIMER
    tags:
      ITEM_PRIMED_AT_BATTLE_START: 20
      ITEM_PRIMED_AT_BATTLE_START_VARIANCE: 19
      ITEM_SETS_MISSION_TIMER: 1

  - type: STR_CULTIST_SUMMONING_LEVEL_1_TICKER
    tags:
      ITEM_NEW_TURN_CHANGES_MISSION_TIMER: 1

  - type: STR_CULTIST_SUMMONING_LEVEL_1_OBJECTIVE_CHARGE
    tags:
      ITEM_PRIMED_AT_BATTLE_START: 1
      ITEM_FUSE_DELAYED_UNTIL_MISSION_TIMER: 1