items:
## Slaught (TU, Reaction, becomes tired after 3 turns ???)
## "lasts for 1d10 minutes"
  - &STR_SLAUGHT
    type: STR_SLAUGHT_AC
    tags:
      ITEM_BOOST_TIMEUNITS: 20
      ITEM_BOOST_REACTION: 20
      ITEM_REDUCE_HEALTH_ON_USE: 10

## AI probably gets double effective time because they use it randomly
  - type: STR_SLAUGHT_AI_AC
    refNode: *STR_SLAUGHT
    tags:
      ITEM_FUSE_MINIMUM: 2
      ITEM_FUSE_MAXIMUM: 10
      ITEM_FUSE_SIDE: 1 # Hostile

## Frenzon (fear immunity, bravery = 110 Frenzy talent (Combat bonuses) - MA + ??)
  - &STR_FRENZON
    type: STR_FRENZON_AC
    tags:
      ITEM_BOOST_BRAVERY: 110
      ITEM_BOOST_MELEE: 20
      ITEM_BOOST_TIMEUNITS: 10
      ITEM_BOOST_REACTION: 10
      ITEM_BOOST_STRENGTH: 10
      ITEM_REDUCE_HEALTH_ON_USE: 10

  - type: STR_FRENZON_AI_AC
    refNode: *STR_FRENZON
    tags:
      ITEM_FUSE_MINIMUM: 2
      ITEM_FUSE_MAXIMUM: 10
      ITEM_FUSE_SIDE: 1 # Hostile

  - &STR_ZUMTHORIAN_GREYVE
    type: STR_ZUMTHORIAN_GREYVE_AC
    tags:
      ITEM_BOOST_TOUGHNESS: 20
      ITEM_BOOST_STAMINA_RECOVERY: 10
      ITEM_REDUCE_HEALTH_ON_USE: 10

  - type: STR_ZUMTHORIAN_GREYVE_AI_AC
    refNode: *STR_ZUMTHORIAN_GREYVE
    tags:
      ITEM_FUSE_MINIMUM: 2
      ITEM_FUSE_MAXIMUM: 10
      ITEM_FUSE_SIDE: 1 # Hostile

  - &STR_RANDOM_DRUG
    type: STR_RANDOM_DRUG_AC
    tags:
      ITEM_IS_RANDOM_DRUG: 1
      ITEM_CAN_BE_SLAUGHT_CHANCE: 40 # manufacture: STR_IDENTIFY_DRUG_AC
      ITEM_CAN_BE_FRENZON_CHANCE: 40
      ITEM_CAN_BE_ZUMTHORIAN_GREYVE: 20

  - type: STR_RANDOM_DRUG_AI_AC
    refNode: *STR_RANDOM_DRUG
    tags:
      ITEM_FUSE_MINIMUM: 2
      ITEM_FUSE_MAXIMUM: 10
      ITEM_FUSE_SIDE: 1 # Hostile


extended:
  tags:
    BattleUnit:
      UNIT_REDUCED_HEALTH_BY: int # only shows correctly on returnFromMissionUnit
      UNIT_CURRENT_BOOST_BRAVERY: int
      UNIT_CURRENT_BOOST_MELEE: int
      UNIT_CURRENT_BOOST_TIMEUNITS: int
      UNIT_CURRENT_BOOST_REACTION: int
      UNIT_CURRENT_BOOST_STRENGTH: int
      UNIT_CURRENT_BOOST_TOUGHNESS: int
      UNIT_CURRENT_BOOST_STAMINA_RECOVERY: int

    BattleItem: # BLEH # can't setTag RuleItem in BattleItem
      ITEM_REDUCED_HEALTH_BY: int
      ITEM_CURRENT_BOOST_BRAVERY: int
      ITEM_CURRENT_BOOST_MELEE: int
      ITEM_CURRENT_BOOST_TIMEUNITS: int
      ITEM_CURRENT_BOOST_REACTION: int
      ITEM_CURRENT_BOOST_STRENGTH: int
      ITEM_CURRENT_BOOST_TOUGHNESS: int
      ITEM_CURRENT_BOOST_STAMINA_RECOVERY: int

    RuleItem:
      ITEM_REDUCE_HEALTH_ON_USE: int
      ITEM_BOOST_BRAVERY: int
      ITEM_BOOST_MELEE: int
      ITEM_BOOST_TIMEUNITS: int
      ITEM_BOOST_REACTION: int
      ITEM_BOOST_STRENGTH: int
      ITEM_BOOST_TOUGHNESS: int
      ITEM_BOOST_STAMINA_RECOVERY: int

      ITEM_FUSE_MINIMUM: int
      ITEM_FUSE_MAXIMUM: int
      ITEM_FUSE_SIDE: int

      ITEM_IS_DRUG: int
      ITEM_IS_RANDOM_DRUG: int
      ITEM_CAN_BE_SLAUGHT_CHANCE: int
      ITEM_CAN_BE_FRENZON_CHANCE: int
      ITEM_CAN_BE_ZUMTHORIAN_GREYVE: int

  scripts:
    hitUnit:
      - new: ROSIGMUNDA_hU_roll_random_drug
        offset: 10
        code: |
          var int random;
          var int randomMin;
          var int randomMax;
          var ptr RuleItem chosenDrug;

          damaging_item.getTag random Tag.ITEM_IS_RANDOM_DRUG;

          if eq random 0;
            return power part side;
          end;

          # weighted distribution
          damaging_item.getTag random Tag.ITEM_CAN_BE_SLAUGHT_CHANCE;
          add randomMax random;
          damaging_item.getTag random Tag.ITEM_CAN_BE_FRENZON_CHANCE;
          add randomMax random;
          damaging_item.getTag random Tag.ITEM_CAN_BE_ZUMTHORIAN_GREYVE;
          add randomMax random;

          battle_game.randomRange random 0 randomMax;
          set randomMin 0;
          damaging_item.getTag randomMax Tag.ITEM_CAN_BE_SLAUGHT_CHANCE;
          # debug_log "Rolling for slaught";
          # debug_log "random: " random;
          # debug_log "randomMin: " randomMin;
          # debug_log "randomMax: " randomMax;
          if and ge random randomMin lt random randomMax;
            rules.getRuleItem chosenDrug "STR_SLAUGHT_AC";
            # debug_log "Rolled slaught";
          end;

          set randomMin randomMax;
          damaging_item.getTag randomMax Tag.ITEM_CAN_BE_FRENZON_CHANCE;
          add randomMax randomMin;
          # debug_log "Rolling for frenzon";
          # debug_log "random: " random;
          # debug_log "randomMin: " randomMin;
          # debug_log "randomMax: " randomMax;
          if and ge random randomMin lt random randomMax;
            rules.getRuleItem chosenDrug "STR_FRENZON_AC";
            # debug_log "Rolled frenzon";
          end;

          set randomMin randomMax;
          damaging_item.getTag randomMax Tag.ITEM_CAN_BE_ZUMTHORIAN_GREYVE;
          add randomMax randomMin;
          # debug_log "Rolling for greyve";
          # debug_log "random: " random;
          # debug_log "randomMin: " randomMin;
          # debug_log "randomMax: " randomMax;
          if and ge random randomMin lt random randomMax;
            rules.getRuleItem chosenDrug "STR_ZUMTHORIAN_GREYVE_AC";
            # debug_log "Rolled greyve";
          end;
          
          chosenDrug.getTag random Tag.ITEM_REDUCE_HEALTH_ON_USE; 
          damaging_item.setTag Tag.ITEM_REDUCED_HEALTH_BY random;
          chosenDrug.getTag random Tag.ITEM_BOOST_BRAVERY;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_BRAVERY random;
          chosenDrug.getTag random Tag.ITEM_BOOST_MELEE;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_MELEE random;
          chosenDrug.getTag random Tag.ITEM_BOOST_TIMEUNITS;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_TIMEUNITS random;
          chosenDrug.getTag random Tag.ITEM_BOOST_REACTION;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_REACTION random;
          chosenDrug.getTag random Tag.ITEM_BOOST_STRENGTH;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_STRENGTH random;
          chosenDrug.getTag random Tag.ITEM_BOOST_TOUGHNESS;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_TOUGHNESS random;
          chosenDrug.getTag random Tag.ITEM_BOOST_STAMINA_RECOVERY;
          damaging_item.setTag Tag.ITEM_CURRENT_BOOST_STAMINA_RECOVERY random;

          return power part side;

      - new: ROSIGMUNDA_hU_handle_effect_for_ai_drugs
        offset: 11 # needs to be higher than ROSIGMUNDA_hU_roll_random_drug
        code: |    
          var int newBoost;
          var int currentBoost;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_BRAVERY;
          # debug_log "ITEM_CURRENT_BOOST_BRAVERY" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_BRAVERY;
          if and gt newBoost 0 gt newBoost currentBoost; # I suppose newBoost > 0 isn't necessary due to the second condition

            # 110 bravery is considered fear immune (even for AI I hope)
            unit.Stats.getBravery currentBoost; # currentBravery
            add currentBoost newBoost;
            if gt currentBoost 110;
              unit.Stats.setBravery 110;
              unit.setTag Tag.UNIT_CURRENT_BOOST_BRAVERY 110;
            else;
              unit.Stats.addBravery newBoost;
              unit.setTag Tag.UNIT_CURRENT_BOOST_BRAVERY newBoost;
            end;

          end;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_MELEE;
          # debug_log "ITEM_CURRENT_BOOST_MELEE" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_MELEE;
          if and gt newBoost 0 gt newBoost currentBoost; # I suppose newBoost > 0 isn't necessary due to the second condition
            sub newBoost currentBoost;
            unit.Stats.addMelee newBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_MELEE newBoost;
          end;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_TIMEUNITS;
          # debug_log "ITEM_CURRENT_BOOST_TIMEUNITS" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_TIMEUNITS;
          if and gt newBoost 0 gt newBoost currentBoost; 
            sub newBoost currentBoost;
            unit.Stats.addTimeUnits newBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_TIMEUNITS newBoost;
          end;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_REACTION;
          # debug_log "ITEM_CURRENT_BOOST_REACTION" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_REACTION;
          if and gt newBoost 0 gt newBoost currentBoost;
            sub newBoost currentBoost;
            unit.Stats.addReactions newBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_REACTION newBoost;
          end;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_STRENGTH;
          # debug_log "ITEM_CURRENT_BOOST_STRENGTH" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_STRENGTH;
          if and gt newBoost 0 gt newBoost currentBoost;
            sub newBoost currentBoost;
            unit.Stats.addStrength newBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_STRENGTH newBoost;
          end;

          
          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_TOUGHNESS;
          # debug_log "ITEM_CURRENT_BOOST_TOUGHNESS" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_TOUGHNESS;
          if and gt newBoost 0 gt newBoost currentBoost;
            sub newBoost currentBoost;
            # There is a sanity check for addArmor for values between 0 and armorMax
            # unit.addArmor SIDE_FRONT newBoost;
            # unit.addArmor SIDE_LEFT newBoost;
            # unit.addArmor SIDE_RIGHT newBoost;
            # unit.addArmor SIDE_REAR newBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_TOUGHNESS newBoost;
          end;

          damaging_item.getTag newBoost Tag.ITEM_CURRENT_BOOST_STAMINA_RECOVERY;
          # debug_log "ITEM_CURRENT_BOOST_STAMINA_RECOVERY" newBoost;
          unit.getTag currentBoost Tag.UNIT_CURRENT_BOOST_STAMINA_RECOVERY;
          if and gt newBoost 0 gt newBoost currentBoost;
            sub newBoost currentBoost;
            unit.setTag Tag.UNIT_CURRENT_BOOST_STAMINA_RECOVERY newBoost;
          end;
          

          return power part side;


    newTurnItem:
      - new: ROSIGMUNDA_nTI_prime_fuse_on_ai_drugs
        offset: 1
        code: |
          var int fuseMin;
          var int fuseMax;
          var ptr RuleInventory rInv;
          var text rInvId;
          var int temp;
          var ptr BattleUnit bUnit;
          var int unitFaction;

          item.getTag temp Tag.ITEM_IS_DRUG;
          if eq temp 0;
            return;
          end;

          item.getSlot rInv;
          rInv.getId rInvId;

          item.getOwner bUnit;
          bUnit.getFaction unitFaction;
          
          item.getTag temp Tag.ITEM_FUSE_SIDE;

          if or eq bUnit null eq unitFaction FACTION_PLAYER eq temp 0 eq rInvId "STR_GROUND"; # don't do it for the player
            item.setFuseEnabled 0;
            item.setFuseTimer -1;
            # debug_log "rInvId" rInvId;
            return;
          end;

          item.getTag fuseMin Tag.ITEM_FUSE_MINIMUM;
          item.getTag fuseMax Tag.ITEM_FUSE_MAXIMUM;
          item.isFuseEnabled temp;

          if and gt fuseMin 0 neq rInvId "STR_GROUND" eq temp 0;
            battle_game.randomRange temp fuseMin fuseMax;

            item.setFuseEnabled 1;
            item.setFuseTimer temp;
          end;

          # debug_log "item" item;
          # debug_log "rInv" rInv;
          # debug_log "bUnit" bUnit;



          return;


    healUnit: # doesn't work as part of items
      - new: ROSIGMUNDA_healU_handle_effect_for_player_drugs;
        offset: 1
        code: |
          var int temp;
          var int newBoost;
          var int currentBoost;
          var int reduceHealthBy;
          var int soldierHealth;
          var ptr GeoscapeSoldier geoSoldier;

          item.getTag reduceHealthBy Tag.ITEM_REDUCE_HEALTH_ON_USE;

          if eq reduceHealthBy 0;
            return;
          end;

          target.getGeoscapeSoldier geoSoldier;

          if neq geoSoldier null;
            target.getTag temp Tag.UNIT_REDUCED_HEALTH_BY;
            geoSoldier.Stats.getHealth soldierHealth;

            sub soldierHealth temp;
            sub soldierHealth reduceHealthBy;

            # sanity by the engine check only allows values > 1
            # if le soldierHealth 0; # kill if max health is below 0
            #  target.setHealth 0;
            #end;

            add temp reduceHealthBy;
            target.setTag Tag.UNIT_REDUCED_HEALTH_BY temp;
            # debug_log "reduced health" temp;

            mul reduceHealthBy -1; # negative
            target.Stats.addHealth reduceHealthBy;

            # mul reduceHealthBy -2; # positive again
            # target.addHealth reduceHealthBy; # overboost possible?

            # lazy
            geoSoldier.Stats.getHealth soldierHealth;
            target.getTag temp Tag.UNIT_REDUCED_HEALTH_BY;
            item.getTag reduceHealthBy Tag.ITEM_REDUCE_HEALTH_ON_USE;

            if gt temp soldierHealth;
              battle_game.flashLongMessage "STR_SCRIPT_DRUGS_CARDIAC_ARREST_DONE_FOR";
            else;
              add temp reduceHealthBy;
              if gt temp soldierHealth;
                battle_game.flashLongMessage "STR_SCRIPT_DRUGS_CARDIAC_ARREST_WARNING";
              end;
            end;

            # copied from other part
            # additional tab
            # damaging_item -> item
            # unit -> target

            item.getTag newBoost Tag.ITEM_BOOST_BRAVERY;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_BRAVERY;
            if and gt newBoost 0 gt newBoost currentBoost; # I suppose newBoost > 0 isn't necessary due to the second condition

              # 110 bravery is considered fear immune (even for AI I hope)
              target.Stats.getBravery currentBoost; # currentBravery
              add currentBoost newBoost;
              if gt currentBoost 110;
                target.Stats.setBravery 110;
                target.setTag Tag.UNIT_CURRENT_BOOST_BRAVERY 110;
              else;
                target.Stats.addBravery newBoost;
                target.setTag Tag.UNIT_CURRENT_BOOST_BRAVERY newBoost;
              end;

            end;

            item.getTag newBoost Tag.ITEM_BOOST_MELEE;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_MELEE;
            if and gt newBoost 0 gt newBoost currentBoost; 
              sub newBoost currentBoost;
              target.Stats.addMelee newBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_MELEE newBoost;
            end;
          end;

            item.getTag newBoost Tag.ITEM_BOOST_TIMEUNITS;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_TIMEUNITS;
            if and gt newBoost 0 gt newBoost currentBoost; 
              sub newBoost currentBoost;
              target.Stats.addTimeUnits newBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_TIMEUNITS newBoost;
            end;

            item.getTag newBoost Tag.ITEM_BOOST_REACTION;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_REACTION;
            if and gt newBoost 0 gt newBoost currentBoost;
              sub newBoost currentBoost;
              target.Stats.addReactions newBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_REACTION newBoost;
            end;

            item.getTag newBoost Tag.ITEM_BOOST_STRENGTH;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_STRENGTH;
            if and gt newBoost 0 gt newBoost currentBoost;
              sub newBoost currentBoost;
              target.Stats.addStrength newBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_STRENGTH newBoost;
            end;


            
            item.getTag newBoost Tag.ITEM_BOOST_TOUGHNESS;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_TOUGHNESS;

            # debug_log "newBoost 1" newBoost;
            # debug_log "currentBoost" currentBoost;

            if and gt newBoost 0 gt newBoost currentBoost;
              sub newBoost currentBoost;
              # There is a sanity check for addArmor for values between 0 and armorMax
              # target.addArmor SIDE_FRONT newBoost;
              # target.addArmor SIDE_LEFT newBoost;
              # target.addArmor SIDE_RIGHT newBoost;
              # target.addArmor SIDE_REAR newBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_TOUGHNESS newBoost;
            end;

            # debug_log "newBoost 2" newBoost;
            # debug_log "currentBoost" currentBoost;

            item.getTag newBoost Tag.ITEM_BOOST_STAMINA_RECOVERY;
            target.getTag currentBoost Tag.UNIT_CURRENT_BOOST_STAMINA_RECOVERY;
            if and gt newBoost 0 gt newBoost currentBoost;
              sub newBoost currentBoost;
              target.setTag Tag.UNIT_CURRENT_BOOST_STAMINA_RECOVERY newBoost;
            end;

          return;

    returnFromMissionUnit:
      - new: ROSIGMUNDA_rFMU_reduce_health_on_use;
        offset: 11
        code: |
          var int temp;

          unit.getTag temp Tag.UNIT_REDUCED_HEALTH_BY;
          mul temp -1;

          # debug_log "AC_rFMU_reduce_health_on_use addHealth" temp;
          soldier.Stats.addHealth temp;
          return;

    newTurnUnit:
      - new: ROSIGMUNDA_nTU_cardiac_arrest;
        offset: 1
        code: |
          var int soldierHealth;
          var int reducedHealthByDrugs;
          var ptr GeoscapeSoldier geoSoldier;

          unit.getGeoscapeSoldier geoSoldier;
          geoSoldier.Stats.getHealth soldierHealth;
          unit.getTag reducedHealthByDrugs Tag.UNIT_REDUCED_HEALTH_BY;

          if gt reducedHealthByDrugs soldierHealth;
            unit.setHealth 0;
          end;

          return;

